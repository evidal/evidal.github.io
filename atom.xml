<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Le Blog d'Eric Vidal]]></title>
  <link href="http://evidal.github.io/atom.xml" rel="self"/>
  <link href="http://evidal.github.io/"/>
  <updated>2013-09-20T10:33:49+02:00</updated>
  <id>http://evidal.github.io/</id>
  <author>
    <name><![CDATA[Eric Vidal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Angular.js et Yeoman]]></title>
    <link href="http://evidal.github.io/blog/2013/02/24/angular.js-et-yeoman/"/>
    <updated>2013-02-24T00:00:00+01:00</updated>
    <id>http://evidal.github.io/blog/2013/02/24/angular.js-et-yeoman</id>
    <content type="html"><![CDATA[<p>Je suis allé au <a href="http://lyonjs.org/">LyonJS</a> ce 18 février 2013, c&#8217;était mon premier User Group JS&hellip; et je pense que je reviendrais. Les sujets présentés étaient <a href="http://angularjs.org/">Angular.js</a>, <a href="http://yeoman.io/">Yeoman</a> et un lightning talk sur les Web Workers.</p>

<p>Premier contact donc avec Angular avec la présentation de <a href="https://twitter.com/ThierryChatel">Thierry Chatel</a> qui nous fait un petit historique sur Angular et qui nous expose les bases du framework.</p>

<p>Sa présentation est suivie d&#8217;une super séance de live coding faite par <a href="https://twitter.com/Swiip">Matthieu Lux</a>. Yeoman est un outil permettant de gérer les dépendances de ses projets Javascript. Il intégre 3 outils:</p>

<ul>
<li>Yeoman qui permet d&#8217;initialiser un projet JS en configurant des outils standard JS</li>
<li>Grunt, un outil de build, preview et test JS préconfiguré par yeoman</li>
<li>Bower, l&#8217;outil de gestion de dépendance intégré à Yeoman</li>
</ul>


<p>Matthieu installe donc Yeoman et initie un projet Angular à l&#8217;aide de Yeoman. Ces outils pour cette présentation sont IntelliJ IDEA, une console bash et Google Chrome. Pour la partie service, il utilise une base Mongo DB hébergée chez <a href="https://www.mongohq.com/">Mongo HQ</a> &ldquo;attaquée&rdquo; via des services REST préalablement développés et déployés.</p>

<p>Le projet est initialisé simplement avec la commande yeoman. L&#8217;outil pose un certain nombre de questions (Bootstrap/pas Boostrap, Compass/pas Compass, etc&hellip;). Matthieu ajoute ensuite la dépendance vers Angular (même si un initialiseur Angular existe) pour montrer comment on peut ajouter des éléments à un projet existant.</p>

<p>Une fois le projet initialisé il lance le serveur Web intégré et il peut vérifier le résultat dans Chrome. La nature d&#8217;Angular fait que la page est mise à jour en continu, donc tout changement fait au niveau du HTML est immédiatement pris en compte sur le navigateur. C&#8217;est assez plaisant car avec 2 écrans pour développer, on peut avoir un écran avec le code source et un écran avec le résultat avec un affichage temps réel.</p>

<p>Matthieu a réalisé en 1 heure un projet permettant de gérer une liste avec création/édition/suppression d&#8217;items. Ce qui m&#8217;a plu c&#8217;est la concision et la clarté avec laquelle est structuré ce petit exemple. Le même code écrit uniquement avec JQuery aurait été beaucoup plus volumineux et certainement moins clair.</p>

<p>Bonne cession qui m&#8217;a en tout cas donné envie de me plonger un peu plus sérieusement sur tous ces frameworks Javascript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mon premier sprite en HTML 5]]></title>
    <link href="http://evidal.github.io/blog/2012/10/24/mon-premier-sprite-en-HTML-5/"/>
    <updated>2012-10-24T00:00:00+02:00</updated>
    <id>http://evidal.github.io/blog/2012/10/24/mon-premier-sprite-en-HTML-5</id>
    <content type="html"><![CDATA[<p>Bon ça traîne depuis un petit moment sur mon disque mais voilà ma première utilisation du composant HTML5 canvas.</p>

<p>C&#8217;est le petit Zangief qui a été mis à contribution.</p>

<p>Le source est disponible sur GitHub sous mon projet <a href="https://github.com/evidal/HTML5tests">HTML5tests</a>.</p>

<p>Le resultat de ce test est <a href="http://htmlpreview.github.com/?https://github.com/evidal/HTML5tests/blob/master/canvas.html">ici</a></p>

<iframe src="http://htmlpreview.github.com/?https://github.com/evidal/HTML5tests/blob/master/canvas.html" width="100%" height="600px"></iframe>


<p>Bizarrement je m&#8217;attendais à ce que ce soit beaucoup plus difficile pour avoir un résultat fluide. N&#8217;étant pas un artiste, ce qui a été le plus long a été de trouver les sprites. Du coup ça m&#8217;a donné plein d&#8217;idées et j&#8217;ai téléchargé tout un tas d&#8217;autres sprites (dispo dans mon projet GitHUB <a href="https://github.com/evidal/HTML5tests">HTML5tests</a>).</p>

<p>Je ferai une mise à jour de l&#8217;article avec les différents liens qui m&#8217;ont permis d&#8217;atteindre ce résultat.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elastic Search]]></title>
    <link href="http://evidal.github.io/blog/2012/10/18/elastic-search/"/>
    <updated>2012-10-18T00:00:00+02:00</updated>
    <id>http://evidal.github.io/blog/2012/10/18/elastic-search</id>
    <content type="html"><![CDATA[<p>Elastic Search est un moteur de recherche basé sur Lucene expérimenté par la société
dans laquelle je travaille depuis un certain temps. Ce moteur était présenté
dans le cadre du Lyon JUG par <a href="http://dev.david.pilato.fr/">David Pilato</a> et <a href="https://twitter.com/tlrx">Tanguy Leroux</a>.</p>

<p>L&#8217;interview pre-JUG par les Duchess est disponible <a href="http://www.duchess-france.org/rencontre-avec-david-pilato-sur-elastic-search/">ici</a>.
La présentation elle même est disponible <a href="http://t.co/piqUOkTE">ici</a>.</p>

<p>Je ne vais pas réexpliquer le fonctionnement d&#8217;Elastic Search car de nombreux articles le font déjà (et notamment la présentation de David Pilato).
De notre coté nous avons sélectionner Elastic Serach pour plusierus fonctionnalités importantes pour nous:</p>

<ul>
<li>Nos logicielles sont déployés sur des clusters pour avoir un fonctionnement Actif-Actif. C&#8217;est une des fonctionnalités de base d&#8217;Elastic Search.</li>
<li>Nous manipulons des données très volumineuses en terme de nombre (plusieurs dizaines, voir centaines de millions). Elastic Serach est &ldquo;taillé&rdquo; pour ce volume.</li>
<li>La navigation par &ldquo;Facet&rdquo; qui nous est nécéssaire</li>
</ul>


<p>Cependant nous en sommes encore au stade de l&#8217;étude et nous n&#8217;avons pas encore de vrai déploiement utilisant cette technologie.</p>

<p>Voilà quelques points importants que j&#8217;ai noté pour mémoire:</p>

<ul>
<li>Sécurisation,

<ul>
<li>pour l’instant Elastic Search n’est pas sécurisé. Il est possible qu’il le devienne mais pas dans les toutes prochaines versions.</li>
<li>1ère stratégie : mettre un apache devant et « jouer » avec les règles d&#8217;un firewall (DMZ)
<strong> ajouter une couche http authent pour l&#8217;accès
</strong> utiliser des filtres pour restreindre l’utilisation de certaines commande (comme DELETE, PUT)
** en séparant les index, on peut spécifier des chemins d’accès à des données et gérer des profils</li>
<li>2ème stratégie, utiliser le plugin suivant <a href="https://github.com/sonian/elasticsearch-jetty">https://github.com/sonian/elasticsearch-jetty</a> (solution recommandé uniquement par 1 des speakers)</li>
</ul>
</li>
<li>Cluster et déploiement

<ul>
<li>Les préconisation de déploiement sont de 1 shard par serveur (1 shard = 1 instance de Lucene) + 1 replica</li>
<li>/!\ on ne peut pas changer le nombre de shards une fois qu’un index est crée</li>
<li>Les intervenants recommandent de bien dimensionner son cluster dès le départ, rajouter un nouveau membre au cluster est assez lourd en terme de consommation sur des indexes volumineux</li>
<li>Il est préférable d’effectuer les montées de version à froid (même si des procédures à chaud existent)</li>
<li>D’après le concepteur d’Elastic Search si une requête met plus de 100ms, c’est que la plate-forme est sous dimmensionné.</li>
</ul>
</li>
<li>Il existe une JDBC River qui permet automatiquement d’indexer une table au fil de l’eau

<ul>
<li><a href="https://github.com/jprante/elasticsearch-river-jdbc">https://github.com/jprante/elasticsearch-river-jdbc</a></li>
</ul>
</li>
<li>Un projet d’indexation de Log existe déjà

<ul>
<li><a href="http://logstash.net/">http://logstash.net/</a></li>
</ul>
</li>
<li>Déploiement de références

<ul>
<li>Des déploiements existent avec 25 noeuds indexant plus d’1 milliard de documents</li>
<li>Le premier intervenant (David Pilato) a travaillé sur un projet indexant 500.000 documents des douanes françaises. Le projet tournait sur 3 serveurs low end (CPU 2 cores, mémoire 4GB)</li>
<li>Le deuxième (Tanguy Leroux) a travaillé pour un assureur pour indexer 20.000.000 documents (chaque document était l’équivalent d’une page word). Le projet tournait sur 4 serveurs low end (CPU 2 cores, mémoire 4GB)</li>
</ul>
</li>
<li>Utiliser Elastic Search comme un entrepot de données

<ul>
<li>le créateur le déconseille pour l&#8217;instant mais ce sera peut-être possible à l&#8217;avenir.</li>
<li>Un des intervenant a indiqué qu&#8217;il connaissait un projet utilisant Elastic Search comme base de données principale. Mais dans ce cas il fallait faire une croix sur les transactions et autres fonctionnalités d&#8217;une base de données.</li>
</ul>
</li>
</ul>


<p>Session très intéréssante et speakers disponibles pour répondre aux questions !</p>

<p>Merci le Lyon JUG.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sophisme et Spring]]></title>
    <link href="http://evidal.github.io/blog/2012/07/24/sophisme-et-spring/"/>
    <updated>2012-07-24T00:00:00+02:00</updated>
    <id>http://evidal.github.io/blog/2012/07/24/sophisme-et-spring</id>
    <content type="html"><![CDATA[<p>Une petite note en passant suite aux commentaires d&#8217;un fournisseur (qui m&#8217;énerve).</p>

<p>Ce fournisseur donc aime bien travailler avec Spring, ils sont à l&#8217;aise avec et travaille plutôt bien dessus.
Ces gens là donc sont en train de récupérer un logiciel pour en assurer sa maintenance et sa roadmap.
Une de leur mission et d&#8217;améliorer les tests unitaires qui sont pour l&#8217;instant faible, et la c&#8217;est le drame (avec le ton d&#8217;Enquêtes exclusives ).</p>

<p>Voila leur argumentaire:</p>

<ul>
<li>Spring c&#8217;est super testable</li>
<li>Votre application utilise des EJB (NB: JEE 1.5, EJB 3.1)</li>
<li>Votre application n&#8217;est pas testable, il faut tout injecter à la main, c&#8217;est trop compliqué.</li>
<li>Vous auriez dû utiliser Spring</li>
</ul>


<p>AAaaaaah mais que ça me fatigue/énerve.</p>

<p>Disclaimer : Je considère que le système d&#8217;injection de Spring ne sert à rien dans un serveur d&#8217;application depuis JEE 1.5.
Après pour les autres éléments &ldquo;Springuiens&rdquo;, c&#8217;est une autre histoire.
D&#8217;autant plus que l&#8217;utilisation de JEE ou Spring n&#8217;est pas exclusive !</p>

<p>Quand j&#8217;entends des arguments du genre Spring c&#8217;est mieux parce que c&#8217;est plus simple à tester, ça me fait juste bondir. C&#8217;est un argument moisi.
Il serait beaucoup plus honnête et acceptable de dire &ldquo;je suis plus à l&#8217;aise avec Spring qu&#8217;avec JEE 1.5, alors s&#8217;il te plait laisse moi utiliser Spring&rdquo;.
Ça je pourrais l&#8217;entendre. Le reste, c&#8217;est juste de l&#8217;incompétence.</p>

<p>Pour mémoire &ndash;> <a href="http://www.adam-bien.com/roller/abien/entry/unit_testing_ejb_3_1">http://www.adam-bien.com/roller/abien/entry/unit_testing_ejb_3_1</a></p>

<p>ou alors</p>

<p><a href="http://www.jboss.org/arquillian.html">http://www.jboss.org/arquillian.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy 2.0 : Quoi de neuf doc]]></title>
    <link href="http://evidal.github.io/blog/2012/06/07/Groovy-2.0-Quoi-de-neuf-doc/"/>
    <updated>2012-06-07T00:00:00+02:00</updated>
    <id>http://evidal.github.io/blog/2012/06/07/Groovy-2.0-Quoi-de-neuf-doc</id>
    <content type="html"><![CDATA[<p>J&#8217;ai assisté le 16 juin dernier à la présentation Groovy 2.0 par
<a href="http://glaforge.appspot.com/">Guillaume Laforge</a> au
<a href="http://www.lyonjug.org/">Lyon JUG</a>.
J&#8217;ai découvert <a href="http://groovy.codehaus.org/">Groovy</a> il n&#8217;y a pas si longtemps,
c&#8217;était il y a un peu plus de 2 ans. Le but de son utilisation dans notre
application était d&#8217;écrire des règles évaluées à la volée. Finalement une autre
solution a été choisie par l&#8217;équipe mais j&#8217;ai beaucoup aimé la simplicité du
langage.
Depuis ce premier contact, je l&#8217;utilise régulièrement pour la manipulation de
fichier (un peu comme un super script), comme support via grails pour des démos
ou POC et aussi pour ce blog qui est développé avec
<a href="http://gaelyk.appspot.com/">Gaelyk</a>. C&#8217;est donc un langage que j&#8217;apprécie.</p>

<p>La présentation de <a href="http://glaforge.appspot.com/">Guillaume Laforge</a> se déroulait en 2 temps:</p>

<ul>
<li>un rappel des fonctionnalité actuelles de Groovy 1.8</li>
<li>une présentation des nouveautés Groovy 2.0</li>
</ul>


<p>Cette présentation est accessible sur Slideshare
<a href="http://www.slideshare.net/glaforge/groovy-20-devoxx-france-2012">ici</a>.</p>

<p>Honnêtement le rappel des fonctionnalités était salutaire. Comme j&#8217;utilise
Groovy comme un meilleur <a href="http://java.com/fr/">Java</a>, il y a certains aspects
du langage que je n&#8217;utilise pas comme GPars (un équivalent de <a href="http://akka.io/">AKKA</a>)
ou trop partiellement comme le commande chain ou je me limite par reflexe.
La présentation m&#8217;a clairement montré que j&#8217;avais besoin de me plonger
sérieusement dans la doc de Groovy pour en exploiter toutes ces facets
(ou du moins mieux les connaitre).</p>

<p>Concernant la version 2.0 de Groovy, les évolutions concerne moins le langage
que la plate-forme. Cette nouvelle version est modulaire, c&#8217;est à dire qu&#8217;au lieu
d&#8217;avoir un groovy-all.jar (qui existe encore), on peut prendre d&#8217;autres jars qui
sont des sous modules de Groovy. Le but de cette modularité est de faciliter
l&#8217;utilisation de groovy dans des applications mobiles par exemple, car on va
réduire la taille de l&#8217;application.
Le reste des évolutions concerne l&#8217;adaptation de Groovy aux nouvelles
fonctionnalités de Java 7 permettant d&#8217;intégrer les nouveautés du langage Java
(<a href="http://openjdk.java.net/projects/coin/">projet Coin</a>) et d&#8217;améliorer les
performances de Groovy. Les performances sont maintenant très proches de Java.
Enfin le compilateur Groovy a été amélioré pour être plus râleur et signaler
les erreurs de compilations qui n&#8217;apparaissaient avant qu&#8217;à l&#8217;exécution. Il
permet également maintenant de faire de compilation statique du code.</p>

<p>J&#8217;ai beaucoup aimé cette session et je vais essayer d&#8217;appliquer tout ça notamment
en refondant ce site. Sa vitesse ne me satisfait pas pour l&#8217;instant. Quand à Groovy
le langage est clairement facile et puissant. Sa syntaxe proche de Java fait qu&#8217;il
est très simple à apprendre et petit à petit, avec l&#8217;experience, on incorpore
les spécificités du langage : closure, GDK, JSon, parsers&hellip; Je n&#8217;ai jamais fait de
Scala (qui a le même âge que Groovy) ou de Clojure (plus jeune) mais quand je lis
des sources de ces langages, leur lecture ne me semble pas simple. Avec Groovy,
même quand j&#8217;ignorais les rudiments du langage, le lecture des exemples était
facile pour moi.</p>

<p>Bref, vive Groovy !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mix-IT 2012]]></title>
    <link href="http://evidal.github.io/blog/2012/04/28/Mix-IT-2012/"/>
    <updated>2012-04-28T00:00:00+02:00</updated>
    <id>http://evidal.github.io/blog/2012/04/28/Mix-IT-2012</id>
    <content type="html"><![CDATA[<p>J&#8217;étais avant-hier à Mix-IT 2012 er j&#8217;ai passé un très bon moment. Bravo à l&#8217;organisation pour avoir fait intervenir des speakers de qualité dans un cadre agréable pour seulement 30€. J&#8217;ai participé aux keynotes de bienvenu et à 6 conférences : Social Architecture, Lean Startup, lightning talks, Development Process at Google, Phone Gap et Zero MQ. Je n&#8217;ai malheureusement pas pu assister à la keynote finale de Pamela Fox.</p>

<!--more-->


<h2>Keynotes</h2>

<p>En fait il y avait 2 keynotes d&#8217;accueil, je vais passer rapidement sur la première qui n&#8217;était en fait qu&#8217;une présentation de Chrome Mobile. En revanche, la 2ème était vraiment rafraîchissante. Claire Blondel c&#8217;est présenté à nous comme une Alien : c&#8217;est une fille et elle ne fait pas d&#8217;informatique. Elle est venue nous parler de notre droit à échouer. Ca réflexion a commencé quand elle est parti quelques années à l&#8217;étranger. Ces filles sont allées à l&#8217;école la bas et ont adoré ça. Puis lorsque toute la famille est rentrée en France, ses filles ont commencé à détester l&#8217;école et à y être mauvaises. En creusant elle s’est aperçu que ces filles étaient bloquées car elles avaient peur d&#8217;échouer. Et cette peur les bloquait totalement et les empêchait de faire des progrès. Par la suite tout c&#8217;est arrangé pour ces filles mais elle a tiré de cette expérience que la peur de se tromper est un vrai frein. Après tout que peut-il nous arriver si nous échouons. Cette réflexion  4 principes que nous devrions appliquer pour ne plus avoir peur d&#8217;échouer et donc devenir finalement entreprenant dans notre vie de tous les jours et dans notre travail. J&#8217;ai beaucoup aimé sa présentation.</p>

<h2>Social Architecture 101</h2>

<p>J&#8217;ai enchainé avec la présentation de <a href="http://www.mix-it.fr/profile/hintjens">Pieter Hintjens</a>. Bon j&#8217;avoue, ce n&#8217;était pas tout à fait ce que j&#8217;attendais mais la présentation était intéressante. Pieter était là pour expliquer comment construire un projet et monter une équipe efficace. Je pense que cette présentation a été un peu traumatisante pour certains car Pieter a une approche un peu brutale pour un français : on vire les gens quand ils sont mauvais, on définit des règles et on s&#8217;y tient, sinon on part. De la même façon il considère que tout projet ne s&#8217;appuyant pas sur GitHub et un licence GPL est au pire une hérésie et au mieux une perte de temps et d&#8217;argent. Il nous a également donné sa vision pour construire une équipe: pas les meilleurs développeurs du monde mais des gens engagés et capables de travailler ensemble. De manière générale il voit son rôle de manager comme quelqu&#8217;un qui est là pour résoudre tous les problèmes qui pourrait ralentir l&#8217;avancement du projet. Brutal mais intéressant.</p>

<h2>Lean Startup</h2>

<p>Lean Startup était une session introduisant la méthode Lean, donner ses grands principes.  <a href="http://www.mix-it.fr/profile/PIA_Emmanuel">Emmanuel Levi-Valensi</a> voit la méthode Lean comme une méthode rigoureuse permettant de mêler les méthodes agiles et le Customer Development. La présentation c’est axée sur cette dernière méthode permettant de capter l’avis d’un client. L&#8217;idée du Lean c&#8217;est de fournir au plus vite un Minimal Viable Product aux clients et mesurer de manière effective si le produit rencontre sa clientèle ou non. En fonction de ces retours on peut être amené à faire des &ldquo;Pivots&rdquo; consistant à changer le produit, parfois de manière radicale.</p>

<h2>Lightning Talks</h2>

<p>Petite pause déjeuné (plus de sandwich à la viande!) ou j&#8217;ai pu serrer la main de beaucoup d&#8217;anciens collègues, et Lightning Talks. Honnêtement je ne m&#8217;attendais pas à ce que ce format fonctionne : 5 minutes pour parler d&#8217;un sujet, pas de questions. En fait c&#8217;était très bien, ça oblige les speakers à concentrer leur présentation sur l&#8217;essentiel. J&#8217;ai bien aimé la première intervention sur le fait d&#8217;être fier d&#8217;être développeur et l&#8217;intervention Mongo DB.</p>

<h2>Development Process at Google</h2>

<p>A la présentation Development Process at Google, <a href="http://www.mix-it.fr/profile/GooglePetraCross">Petra Cross</a> nous a expliqué comment les ingénieurs chez Google étaient organisés. Il y a 10000 ingénieurs chez Google. Et tous ces ingénieurs travaillent en mode Agile. Ils ne font pas de Scrum, pas de Kanban ni de Xtreme Programming, mais un peu de tout ça mélangé. Les principes d&#8217;organisation sont les suivants, une hiérarchie la plus faible possible et de l&#8217;auto-organisation. Pour être efficace, les équipes sont composées d&#8217;environ 5 ingénieurs : un Tech Lead et 4 ingénieurs. Les items à développer niveau marketing sont mis dans un tas appellé Icebox. De là, le chef de projet va sortir et prioriser les items. Les ingénieurs vont les découper en tâches et estimer ensemble la complexité (pas le temps) grâce au planning poker (on en a eu un en goodies). Si les tâches so)nt trop complexes, elles sont redécoupées. Une fois que tout est découpé, les ingénieurs prennent les tâchent par ordre d&#8217;importance et les réalisent. Pas de filtrage en fonction du niveau de chaque développeur : tout le monde doit être interchangeable. Les revues de code sont obligatoires et un département Q&amp;A valide ou non les développements. Une équipe fait une release toutes les 1 ou 2 semaines. Je ne comprends définitivement pas les boites utilisant encore le cycle en V, permettant au mieux une release tous les 6 mois.</p>

<h2>PhoneGap</h2>

<p>PhoneGap est un sujet qui m&#8217;intéresse particulièrement. La société dans laquelle je travaille réalise depuis peu quelques applications mobiles. Nos développements doivent être supportés par le plus grand nombre d&#8217;appareil et la fragmentation des systèmes est un vrai problème. <a href="http://www.pamelafox.org/">Pamela Fox</a>, une ancienne employée de Google qui a créé un système nommé &ldquo;<a href="http://www.eatdifferent.com">eat different</a>&rdquo;. Vu que c&#8217;est une application qu&#8217;on utilise pendant les repas, il fallait une application mobile. Pamela a exploré plusieurs solutions. L&#8217;approche native a pour avantage d&#8217;utiliser les performances du téléphone ainsi que tous les appareils qui lui sont liés (caméra, Bluetooth, etc.). Cette approche permet d&#8217;être au plus près des API natives et permet de profiter des qualités de l&#8217;OS. Le gros problème de cette approche c&#8217;est que chaque OS mobile a ça propre plate-forme. iOS utilise de l&#8217;Objective C dans l&#8217;ide X-IDE, disponible uniquement sous MAC. Android utilise du Java (Pamela a un problème avec Java, c&#8217;est le langage que son père utilisait &ndash;> je suis vieux) avec l&#8217;IDE Eclipse. Idem pour tous les autres Bada, RIM, Windows, WebOS.</p>

<p>Une autre approche est d&#8217;utiliser un langage qui va, à partir d&#8217;une même source, générer des applications natives pour tous les systèmes. Cette approche permet de conserver la performance mais empêche une utilisation poussée des API natives.</p>

<p>La dernière approche est de développer son application en utilisant un bridge qui va jouer le rôle d&#8217;interface avec l&#8217;OS hôte. C&#8217;est à cette dernière catégorie que Phone Gap appartient. Avec Phone Gap on développe son application en HTML 5, CSS et Javascript. Cela permet d&#8217;utiliser les librairies Javascript habituelles pour réaliser une application tout en ayant accès via le bridge aux capacités du téléphone. Au moment du packaging, Phone Gap intègre les sources HTML, Javascript et CSS et le bridge au sein d&#8217;une application native (un navigateur sur lequel on ne peut pas naviguer en fait). Pour avoir une interface  graphique adapté au mobiles, de nombreuses librairies CSS et Javascript existes JQuery Mobile, Zepto, Twitter Bootstrap (qu&#8217;elle utilise), etc&hellip;</p>

<p>Bonne présentation, je pense que je vais essayer dans peu de temps Phone Gap.</p>

<h2>ZeroMQ, 0MQ</h2>

<p>Dernière présentation pour moi : ZeroMQ avec le retour de la vengeance de Pieter Hintjens. Là encore, c&#8217;était une présentation un petit peu déroutante. Il a expliqué ce qu&#8217;on pouvait faire avec ZeroMQ mais sans vraiment présenter d&#8217;applications, ce qui a perdu je pense une partie de l&#8217;auditoire. Etant dans le monde Télécom, et donc sensible aux questions de messaging, j&#8217;ai pu y voir un interet. Zero MQ est donc pour Pieter l&#8217;aboutissement de que l&#8217;on peut faire dans le monde du messaging. Un système très light écrit en C permettant de supporter des millions de messages secondes. Il est particulièrement adapté aux applications financières traitant un grand nombre de données en temps réel ou aux applications télécoms donc. J&#8217;ai demandé quel était la différence avec AMQP et Zero MQ et&hellip; il m&#8217;a demandé d&#8217;allé voir sur Internet. Ce que j&#8217;ai fait. Ce que je comprends c&#8217;est que si AMQP a une approche classique centralisée, ZeroMQ permet d&#8217;avoir une approche décentralisée pour la distribution des messages. Bon ça reste un peu obscure, je pense que pour comprendre il va falloir y mettre les mains dedans.</p>

<p>Très bonne journée, ambiance détendue, j&#8217;y retournerai l&#8217;année prochaine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ma&icirc;triser sa production]]></title>
    <link href="http://evidal.github.io/blog/2012/02/21/Maitriser-sa-production/"/>
    <updated>2012-02-21T00:00:00+01:00</updated>
    <id>http://evidal.github.io/blog/2012/02/21/Maitriser-sa-production</id>
    <content type="html"><![CDATA[<p>Un blog un peu court pour expliquer à quel point il est important que les équipes de production soient formées aux environnements d&#8217;exécution qu’elles utilisent. La plupart des administrateurs avec qui j’ai travaillé sont vraiment très bon dans le domaine système, il est beaucoup plus rare qu’ils connaissent aussi nos environnements d&#8217;exécution comme JBoss par exemple.</p>

<p>Bien sur il arrive que les équipes de développement assurent des formations sur l’application que les administrateurs vont déployer. Mais si tous les aspects purement “administratif” sont au mieux passés rapidement, ils sont souvent ignorés.</p>

<p>Et quand on donne des outils aussi puissant qu’un serveur d’application à des administrateurs mal formés, on peut aboutir à des catastrophes. J’ai un exemple récent dans une société dont je tairai le nom d’un serveur JBoss ayant une adresse IP public. Ce serveur avait été installé pour une démo brut de décoffrage, sans paramétrage. Ce qui fait que la console JMX était accessible sans mot de passe, ainsi que la console d’admin qui avait les mots de passe par défaut. Ce serveur c’est fait attaqué. L’attaque a été construite comme cela:</p>

<ul>
<li>scan des ports de la machine</li>
<li>repérage et identification d’un serveur JBoss</li>
<li>repérage que la faille décrite <a href="http://eromang.zataz.com/2011/10/25/jboss-worm-analysis-in-details/">ici</a> fonctionnait bien</li>
</ul>


<p>Et voila un serveur ultra puissant à la merci de pirates.</p>

<p>Ce qu’il faut retenir de cette histoire, c’est qu’un serveur d&#8217;application n’est pas un simple outil qu’on dé-zippe quelque part et qu’on laisser tel quel. De réels efforts doivent être fait pour former les équipes de productions à l’utilisation et à la configuration de tels outils. Une bonne solution est de les faire participer aux tests de performances de l’application. On complétera cette prise en main par une formation adaptée aux problématiques de production (Déploiement, Monitoring, Sécurité, Backup, Restore, Logs, Tunning, etc&hellip;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tunning de la JVM]]></title>
    <link href="http://evidal.github.io/blog/2012/02/20/Tunning-de-la-JVM/"/>
    <updated>2012-02-20T00:00:00+01:00</updated>
    <id>http://evidal.github.io/blog/2012/02/20/Tunning-de-la-JVM</id>
    <content type="html"><![CDATA[<p>Le 17 janvier 2012 avait lieu une soirée au Lyon JUG ayant pour thème la performance des serveurs en java. Le speaker Ludovic Poitou est un ancien de chez Sun qui a quitté la société suite au rachat par Oracle.</p>

<p>Sa présentation était originale, car contrairement à beaucoup d’entre nous, son logiciel <a href="http://forgerock.com/opendj.html">Open DJ</a> ne tourne pas sur un serveur d’application mais en standalone.</p>

<p>Après une présentation détaillée de sa société, j’ai beaucoup aimé l’explication de la gestion de la mémoire de la JVM. J’avoue que c’est un sujet sur lequel je me suis peu penché car les applications sur lesquelles je travaille n’ont pas le même niveau d’exigence que c’est fixé l’équipe d’Open DJ. L’application la plus “chargée” sur laquelle j’ai travaillé répondait sans broncher à 400 requêtes/seconde HTTP en pointe sur un seul serveur, ce qui est déjà un score honorable sur un serveur d’application d’il y a 5 ans. Mais je ne joue pas dans la même cour, le serveur Open DJ monte à plus de 80000 requêtes/seconde, 200 fois plus de charge.</p>

<p>Pour arriver à ce niveau de performance, il faut avoir une très bonne connaissance du fonctionnement de la JVM, et notamment de la gestion de sa mémoire. Open DJ utilise également une base donnée simple et embarquée : <a href="http://www.oracle.com/technetwork/database/berkeleydb/overview/index.html">Berkeley DB</a></p>

<p>Je vous invite à relire la présentation disponible via le site du Lyon JUG (<a href="http://www.lyonjug.org/evenements/perf-serveur">ici</a>).</p>

<p>Suite à cette présentation je me suis penché sur les paramètres qu’on utilisait pour faire tourner notre JBoss en production. On avait optimisé les options de la JVM de manière un peu empirique, en s’appuyant sur des morceaux de configuration qu’on avait récupéré à travers différents blogs et aussi suite à de nombreuses campagnes de test.
Voilà ce que nous utilisons en production:</p>

<ul>
<li>-d64 : pour faire fonctionner la JVM en 64 bits, et donc adresser au delà de 4Go</li>
<li>-Xms8192m, pour réserver au minimum 8Go de Mémoire vive. C’est une stratégie défensive pour être sur que notre JVM ne se fera pas “piquer” la mémoire par d’autres applications.</li>
<li>-Xmx8192m, pour ne pas dépasser ces fameux 8Go et donc laisser de l’espace aux autres applications tournant sur le serveur.</li>
<li>-XX:MaxPermSize=512m, l’espace la mémoire de type Permanent Generation contient toute les données statiques de la JVM. Il faut qu’il soit suffisamment grand mais pas démesuré. 512 Go est un bon chiffre pour les applications allouant au delà de 8Go de mémoire, il peut être réduit à moins pour les applications plus petite. Il est extrêmement rare d’allouer au delà de 512Mo (jamais vu de mon coté)</li>
<li>-Djava.awt.headless=true, l’option classique pour les serveurs Unix n’ayant pas de serveur X installé</li>
<li>-Dorg.jboss.resolver.warning=true, c’est une option qui était déjà présente. On l’a laissée.</li>
<li>-Dsun.rmi.dgc.client.gcInterval=3600000, c’est une option qui permet de donner la fréquence de garbage collection. En l&#8217;occurrence ça ne sert à rien car nous lui avons donné la valeur par défaut.</li>
<li>-XX:+UseParNewGC, cette option permet de gérer la copie des objets dans la portion de mémoire à plus long terme de manière “multi-threadée” en profitant de la puissance des machines multi-cpu (ce qui est notre cas)</li>
<li>-XX:+AggressiveOpts, je pense que cette option est aussi inutile dans le sens ou elle est devenue activé par défaut depuis la version du JRE 1.5_06. Elle permet d’activer des flags de compilation plus performant.</li>
<li>-XX:+DoEscapeAnalysis, c’est un flag qui permet à la JVM d’optimiser les locks sur l’application, plus d’explication <a href="http://blog.xebia.com/2007/12/21/did-escape-analysis-escape-from-java-6/">ici</a></li>
<li>-XX:+UseLargePages, option permettant d’allouer de gros espaces mémoire, pour plus de détail aller voir <a href="http://www.oracle.com/technetwork/java/javase/tech/largememory-jsp-137182.html">ici</a></li>
<li>-XX:+UseTLAB, option permettant à chaque thread d’allouer sa propre mémoire. C’est une option à activer sur les systèmes multi-processeurs.</li>
<li>-XX:TLABSize=64k, cette option spécifie la taille de la young generation pour chaque thread.</li>
</ul>


<p>Pour compléter ce petit billet, voilà 2 liens utiles</p>

<ul>
<li>la <a href="http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html">documentation</a> officielle de la commande java</li>
<li>un <a href="http://www.datadisk.co.uk/html_docs/java_app/jboss5/jboss5_tuning.htm">blog</a> qui nous avait bien aidé</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gestion des performances]]></title>
    <link href="http://evidal.github.io/blog/2012/01/12/Gestion-des-performances/"/>
    <updated>2012-01-12T00:00:00+01:00</updated>
    <id>http://evidal.github.io/blog/2012/01/12/Gestion-des-performances</id>
    <content type="html"><![CDATA[<p>Je travaille depuis maintenant 2 ans sur un très gros projet qui gère des dizaines de millions d&#8217;utilisateurs. Notre logiciel est donc très sensible à la charge et à toutes améliorations de performance. Voilà une petite liste d&#8217;actions qui permettent de traquer ou de prévenir les problèmes de performances en général.</p>

<h2>Prévention</h2>

<h3>Simplification</h3>

<p>De manière général plus un traitement est simple, plus il est performant. Il faut donc rechercher dans le design la façon de faire la plus simple.
En bonne pratique il faut:</p>

<ul>
<li>ne pas multiplier les couches d&#8217;abstraction. Plus on multiplie les intermédiaires, moins on est réactif.</li>
<li>ne pas multiplier l&#8217;utilisation de librairies techniques (construire de gros échafaudages de librairie). On prend le risque de rendre une fonctionnalité simple beaucoup plus compliquée.</li>
<li>utiliser des environnements maitrisés. Utiliser les dernières technologies c&#8217;est super, mais si on ne maitrise pas tous les impacts, on peut construire de vraies bombes à retardement.</li>
</ul>


<h3>Faire des tests de performance</h3>

<p>Sur notre projet nous avons utilisé JMeter pour simuler du trafic. Attention on ne doit pas seulement faire un hit sur de 2-3 pages mais réaliser un scénario complet et dynamisé.
Par la suite les tests doivent se dérouler sur plusieurs heures ou jours pour voir si la plateforme est stable dans le temps.
Pendant ces tests il ne faut pas forcément essayer de trouver les limites de l&#8217;application mais la soumettre à un stress nominal.
Les tests aux limites sont intéressants mais uniquement si la plate-forme répond correctement au stress nominal.</p>

<h3>Dimensionner l&#8217;infrastructure, limiter la charge</h3>

<p>A partir des tests établis précédemment on peut en déduire des infrastructures cibles.
On ne va pas mettre la même infrastructure chez un client ayant 2 millions de comptes que chez un client ayant 80 millions de comptes.
Il est important de définir ces infrastructures dans les contrats quand on vend le logiciel.
De plus il est important pour les applications critiques de mettre en place des mécanismes de protection pour éviter la saturation de la plate-forme.
On peut par exemple mettre en place un système de licence qui limite le nombre d&#8217;utilisateurs à 10 millions et/ou à un certain nombre de requêtes HTTP par seconde.
Avec cela on garantit le service pour la charge que l&#8217;on a défini contractuellement. Il faudra bien sur penser à ce système dès la conception du logiciel.</p>

<h2>Corrections</h2>

<p>Au niveau développement voilà un certain nombre d&#8217;éléments permettant de traquer les problèmes.</p>

<h3>Optimisation SQL</h3>

<p>De manière générale le tout premier élément limitant d&#8217;un logiciel sur un serveur est la base de données mal utilisée. Il peut y avoir plusieurs causes:</p>

<ul>
<li>mauvais modèle de données</li>
<li>pas d&#8217;index</li>
<li>trop de requêtes SQL</li>
<li>requêtes SQL non optimisées</li>
<li>non maitrise du Framework technique accédant à la base</li>
</ul>


<p>Dans un premier temps, il va falloir tracer les requêtes SQL générées par l&#8217;application. Si vous utilisez Hibernate, vous pouvez par exemple mettre à true le paramètre hibernate.show_sql.
Par la suite vous allez exécuter un scenario de test unitaire sur votre application. Cela va vous permettre d&#8217;identifier les requêtes SQL exécutées à chaque étape de votre scénario.
Des actions doivent être prises si:</p>

<ul>
<li>une même requête est exécutée plusieurs fois pour une étape donnée</li>
<li>une ou plusieurs requêtes inattendues apparaissent (par exemple un delete et des insert alors qu&#8217;on fait un simple select, si si c&#8217;est possible voir [[www.yonita.com/2011_11_16_PERFORMANCE_ANTIPATTERNS_DEVOXX.pdf|ici]])
Ils faut impérativement rester maitre des requêtes faites vers la base de données.</li>
</ul>


<p>Dans un deuxième temps il fait traquer les requêtes consommatrices de ressources. Sur Oracle, on peut utiliser l&#8217;outil Oracle Enterprise Manager qui est une console d&#8217;administration Web de la base de données.
Cet outil permet de monitorer en temps réel la charge de la base de donnée mais aussi d&#8217;avoir la liste des requêtes les plus consommatrices. Un fois ces requêtes identifiées on pourra les optimiser en:</p>

<ul>
<li>ajoutant des index</li>
<li>ajoutant des hints pour l&#8217;optimiseur SQL (les hints sont tout à fait compatible avec des outils comme Hibernate)</li>
<li>en repensant une partie du modèle de base de données pour l&#8217;optimiser</li>
</ul>


<p>Enfin une des dernières optimisations au niveau base de données est de bien préparer la base.
Si le modèle a un impact très fort sur les performances, il ne faut pas négliger la configuration de la base.
Il faut notamment travailler avec un DBA pour optimiser (pour Oracle) la taille des blocs, des redo-logs, des archives-logs.
Attention toutefois à ne pas faire n&#8217;importe quoi, si vous ne maitrisez  pas ces paramètres, n&#8217;y touchez pas.</p>

<h3>Optimisation des Objets/Mémoire/Threads</h3>

<p>Ce paragraphe s&#8217;intéresse à l&#8217;étude et l&#8217;optimisation du code java.</p>

<p>L&#8217;utilitaire jmap permet d&#8217;avoir plus d&#8217;information sur l&#8217;utilisation de la mémoire et des objets. Cet outil est utile pour monitorer la JVM quand elle est stressée de manière normale.</p>

<ul>
<li>jmap -d64 -heap <pid> > heap.txt

<ul>
<li>cette commande permet d&#8217;avoir un état détaillé de la mémoire. Cela vous permettra d&#8217;ajuster les paramètres mémoires de la JVM.</li>
</ul>
</li>
<li>jmap -d64 -histo:live <pid> > histo.txt

<ul>
<li>cette commande permet d&#8217;avoir la liste de toutes les instances tournant dans la JVM. On pourra détecter un trop grand nombre d&#8217;instance pour un type d&#8217;objet.</li>
</ul>
</li>
</ul>


<p>Les applications JEE sont multi-threadés, les threads sont cachés par les APIs de haut niveau de la norme JEE (Servlet, EJB).
Si c&#8217;est API sont mal utilisées, des problèmes de performance apparaissent (notamment des cas d&#8217;inter-blocage).
Pour s&#8217;assurer que notre application n&#8217;est pas dans ce cas, il faut la soumettre à sa charge nominale grâce à des injecteurs ou des outils comme JMeter.
Une fois que l&#8217;application est en cours de fonctionnement, on va faire des Threads Dump de manière régulière pour vérifier qu&#8217;aucun thread n&#8217;est bloqué.
La résolution des cas d&#8217;inter-blocage en changeant l&#8217;implémentation d&#8217;une méthode a souvent des résultats spectaculaires.
A noter que les threads dump en Java se font en envoyant SIGQUIT au process à l&#8217;aide de la commande kill -3 &lt;process_id>.
Sous JBoss on peut faire ça via la console JMX sur le bean ServerInfo.</p>

<p>Une des dernières techniques pour voir plus claire dans le fonctionnement d&#8217;une application. Personnellement j&#8217;ai rarement progressé en profilant une application.
De nombreux outils existent pour profiler une application, cependant un profiler est livré avec le JDK: HPROF. Il peut fonctionner en mode classique (on enregistre tous les évènements) ou en mode sampling (on prend un photo de la JVM toutes les minutes par exemple).
Si on travaille sur environnement stressé, il est préférable d&#8217;utiliser le mode Sampling.</p>

<p>Voilà, c&#8217;était un petit aperçu des différentes techniques que j&#8217;utilise pour améliorer les performances de mes applications. Il en existe certainement bien d&#8217;autres mais celles-ci nous ont bien aidé pour avoir une application performante en production.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud Synth&egrave;se]]></title>
    <link href="http://evidal.github.io/blog/2011/07/07/Cloud-Synthese/"/>
    <updated>2011-07-07T00:00:00+02:00</updated>
    <id>http://evidal.github.io/blog/2011/07/07/Cloud-Synthese</id>
    <content type="html"><![CDATA[<p>Le 9 et 10 juin j&#8217;ai eu la chance de participer à synthèse sur les technologies du Cloud.</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/Cirrocumulus_to_Altocumulus.JPG/800px-Cirrocumulus_to_Altocumulus.JPG" alt="source http://commons.wikimedia.org/" /></p>

<p>Voilà mes notes.</p>

<!--more-->


<h2>Concepts</h2>

<p>Le Cloud est un terme à la mode. Il faut se méfier des imitations. Le Cloud ne veut pas dire
Hosting ou logiciel en ligne. L&#8217;hébergement ou les logiciels accessiblesne sont pas nouveau et
existe depuis longtemps. Le Coud est plus l&#8217;arrivé à maturité de certaines technologies et d&#8217;acteurs IT:</p>

<ul>
<li>La virtualisation est massivement utilisée dans le Cloud</li>
<li>Les applications sont dévenues des application WEB</li>
<li>Les Architecures SOA sont utilisées</li>
<li>Des sociétés IT suffisemment grosse pour inspirer la confiance existe</li>
<li>Les start-up des années 2000 ont eu besoin des technologies Cloud pour exister et grossir</li>
</ul>


<p>Pour résumer les points clés d&#8217;un/e déploiement/applciation Cloud sont:</p>

<ul>
<li>controlable par une API pour couplage au SI</li>
<li>Multi-Tenancy, ou capacité à cohabiter utilisateur du Cloud sans interférence.</li>
<li>Reliability, c&#8217;est à dire pour un coup identique ou moindre, augmenter sa résistence aux aléas d&#8217;un système (composants qui crashent, datacenter qui brulent, etc&hellip;).</li>
<li>Scalability (in and out), être capable de muscler sa solution si besoin ou au contraire diminiuer sa puissance si trop grosse (et payer ce qu&#8217;on utilise).</li>
<li>Performance, la puissance est potentiellement infinie du point de vue de notre utlisation.</li>
</ul>


<p>3 types d&#8217;usages existent:</p>

<ul>
<li>IaaS – Infrastructure as a Service, pour disposer d&#8217;une machine virtuelle dans le Cloud</li>
<li>PaaS – Platform as a Service, Middleware utilisant une infrastructure de type Cloud pour fonctionner et utilisable via une API</li>
<li>SaaS – Software as a Service, un logiciel utilisant une infrastructure de type Cloud pour fonctionner (et intégrable dans son SI via des APIs)</li>
</ul>


<h3>IaaS</h3>

<p>Les offres IaaS (Infrastructure as a Service) proposent de se construire infrastructure dans le Cloud (serveur, réseau). On peut utiliser cette infrastructure comme une extension de son propre système ou comme une infrastructure prête à l&#8217;emploi: on utilise exactement ce dont on a besoin, avec l&#8217;OS qu&#8217;on veut. Si plus (ou moins) de puissance est nécéssaire, on définit des règles pour adapter la puissance dont on a besoin, et donc son coût.</p>

<h3>PaaS</h3>

<p>Le PaaS (Platfom as a Service) vous proposent toute une gamme de middleware prêts à être utilisé. Toutes la partie matériel, système d&#8217;exploitation est complètement masqué, n&#8217;est visible que le middleware. On trouvera dans cette gamme de service des solutions très variées: Base de données (SQL ou non), Serveur d&#8217;Application (Java ou non), des Messages Broker, des solutions de paiements, etc. Comme dans le cas de l&#8217;IaaS ces plateformes sont virtuellement illimitées en terme de puissance et on paye uniquement ce que l&#8217;on consomme.</p>

<h3>SaaS</h3>

<p>Le Software as a Service existe depuis longtemps mais ne doit pas confondu avec des solutions &ldquo;hostées&rdquo;. Les  principales différences avec un service hosté sont les suivantes :</p>

<ul>
<li>le logiciel disponible en mode SaaS est virtuellement illimité en terme de nombre d&#8217;utilisateurs.</li>
<li>des APIs doivent permettre une interconnexion avec d&#8217;autres systèmes (comme le SI)</li>
<li>l&#8217;utilisateur paye pour ce qu&#8217;il utilise
Dans cette gamme de service, la variété de solutions est pléthorique : Suites Bureautiques, Messageries, Wiki d&#8217;entreprise, logiciel de gestion ultra scpécialisé (gestion commerciale), etc.</li>
</ul>


<h3>Sécurité et Cloud</h3>

<p>On voit donc que migrer tout ou partie de ces applications vers le Cloud est très attractif, mais comme pour toute décision, on doit soigneusement réfléchir aux conséquences, notamment en terme de sécurité. Car migrer vers le Cloud ça veut dire donner l&#8217;accès à un tiers à des données qui nous appartiennent, ce qui peut dans certains cas présenter des problèmes légaux ou de confidentialités.</p>

<p>Du coté des points positifs, on retiendra les éléments suivants:</p>

<ul>
<li>Les Administrateurs de ce genre de solutions sont très bons, souvent meilleurs que les personnes dont nous disposons en interne.</li>
<li>Les plateformes (et leurs administrateurs) sont disponibles en 365/7/24 : 365 jours par an, 7 jours sur 7, 24 heures sur 24. Peu d&#8217;entreprises peuvent se permettre une telle disponibilités.</li>
<li>Les infrastructures des ces solutions sont bien mieux protégées des attaques car tous les patchs de sécurité sont appliqués très rapidement et de manière transparente pour les utilisateurs.</li>
<li>Toute l&#8217;infrastructure est redondante donc les pannes matériels sont correctement gérées.</li>
<li>PaaS, IaaS ou SaaS tournent dans des VM, ce qui isole des autres clients et de leur défaillance potentielles (ex. mémoire saturée).</li>
<li>Les données sont distribuées ce qui assure plus de sécurité quand à leur conservation.</li>
</ul>


<p>Mais tous n&#8217;est pas rose, et pour tempérer tous ces points positifs, voila une liste d&#8217;éléments auxquels ont doit réfléchi avant de basculer:</p>

<ul>
<li>Toutes ces solution sont opaques: on ne sait pas comment ça fonctionne, on ne sait pas qui gère notre plateforme, on ne sait pas où se trouve le datacenter, etc.</li>
<li>On doit avoir complètement confiance dans notre fournisseur.</li>
<li>Les possesseurs de la plateforme peuvent accéder à mes données, comment s&#8217;assurer de la confidentialités des données sensibles</li>
<li>Une fois qu&#8217;on utilise plus la plateforme, que deviennent mes données ? Sont-elles détruites ou conservées par mon fournisseur ?</li>
<li>La plupart des administration publique ne peuvent pas utiliser de tels services pour des raisons légales (localisation géographique des serveurs, agrément pour la gestion des données médicales, etc.)</li>
<li>Rien n’empêche le fournisseur de faire de faire du Datamining sur mes données (ex. Google Mail et les publicités)</li>
</ul>


<h3>Cas d&#8217;utilisation</h3>

<p>Venons-en au cas d&#8217;utilisation, c&#8217;est à dire comment utiliser cette technologie dans mon entreprise.</p>

<ul>
<li>Externaliser son IT. Dans ce cas la, je confie à un tiers la gestion des comptes emails, des calendriers partagés, de l&#8217;Intranet, etc&hellip; (Google Apps)</li>
<li>Externaliser sa solution de CRM (Sales Force)</li>
<li>Optimiser ses ressources IT : migrer tous les serveurs dans le Cloud et utiliser la puissance machine uniquement quand c&#8217;est nécessaire.</li>
<li>Application WEB a très forte audience pour être capable de gérer les très grosses montées en charge et être capable de relacher cette puissance par la suite</li>
<li>&ldquo;Business Continuity&rdquo; conserver une partie de ses machines en interne et prévoir un système complet de Fail-Over dans le Cloud.</li>
</ul>


<p>Un des points fort des applications Cloud sont les SLA (Service Level Agreement ou Qualité de Service), mais tout n&#8217;est pas parfait. En effet les plateforme Cloud ont des  SLA très importante (99.999999999 pour Amazon S3) mais il arrive qu&#8217;il y ait des pannes. Tout le monde ce souvient de la grosse panne Amazon en avril 2011 qui a paralysé certains gros site pendant quelques jours. Il faut donc se tenir prêt à ce que le Cloud soit défaillant, voilà quelques idées pour réduire ce risque. Ces idées ne sont pas nouvelles et doivent déjà être mise en oeuvre sur les très gros projets à hébergement classique:</p>

<ul>
<li>Varier les solutions d&#8217;hébergement

<ul>
<li>serveurs internes/externes, 2 fournisseurs Cloud différents,</li>
<li>différents fournisseurs Cloud (Amazon, Google Microsoft, &hellip;)</li>
<li>différentes localisations de datacenter (Amazon Europe, Amazon US East#</li>
</ul>
</li>
<li>Monitorer les applications pour détecter/prévenir les problèmes et réduire les temps d&#8217;indisponibilités.</li>
<li>Etre capable d&#8217;utiliser les API de son fournisseur Cloud pour réagir rapidement</li>
<li>Avoir une plate-forme suffisamment générique pour changer de fournisseur en cas de besoin.</li>
</ul>


<h2>Les offres Cloud</h2>

<p>Il y a 4 &ldquo;gros&rdquo; fournisseurs (Cloud Service Providers) dans le domaines du Cloud:</p>

<ul>
<li><a href="http://aws.amazon.com">Amazon</a></li>
<li><a href="http://www.google.com/Apps">Google Apps</a> et <a href="https://appengine.google.com/">Google App Engine</a></li>
<li><a href="http://www.force.com/">Force</a> et <a href="www.salesforce.com">Salesforce</a></li>
<li><a href="http://msdn.microsoft.com/fr-fr/windowsazure">Microsoft</a> et <a href="http://www.microsoft.com/fr-fr/office365/online-software.aspx">Office 365</a></li>
</ul>


<h3>Amazon</h3>

<p><a href="http://aws.amazon.com">Amazon</a> est l&#8217;un des tous premiers fournisseurs Cloud. La légende (rumeur) veut qu&#8217;ils aient acheté trop de machine à leur début et qui&#8217;ils aient cherché un moyen de les utiliser grâce à de nouveaux services. Amazon est positionné sur les solutions de type IaaS et PaaS avec notamment</p>

<ul>
<li>EC2, Elastic Compute Cloud

<ul>
<li>Location de serveur (avec choix dymanique de la puissance)</li>
<li>Location de Serveur avec HADOOP (pour faire du <a href="http://fr.wikipedia.org/wiki/MapReduce">map reduce</a>)</li>
</ul>
</li>
<li>S3, Simple Storage Service,

<ul>
<li>On peut considérer S3 comme le disque dur d&#8217;Internet. De nombreux services à très forte volumétrie utilisent S3 (comme dropbox)/</li>
<li>SLA : 99,999999999%</li>
<li>La SLA est tellement énorme, qu&#8217;une nouvelle solution moins chère avec des SLA moins élevés est à l&#8217;étude.</li>
</ul>
</li>
<li>et aussi

<ul>
<li>EBS, Elastic Block Store (Disques pour EC2)</li>
<li>SQS, Simple Queue Service (Système de queue)</li>
<li>SNS, Simple Notification System (Messaging en mode push)</li>
<li>Simple DB (Stockage clé/valeur)</li>
<li>RDS, Relational Database Service (MySQL)</li>
<li>Elastic Load Balancing, Elastic IP, Autoscale</li>
<li>VPC, Virtual Private Cloud</li>
<li>&hellip;</li>
</ul>
</li>
</ul>


<p>Pour les développeurs JAVA, une solution est intéressante : Elastic Beanstalk. C&#8217;est la combinaison de tout un tas de service Amazon pour fournir un serveur d&#8217;application JEE prêt à l&#8217;emploi. Point intéressant, si vous utilisez Beanstalk, la première année est gratuite à condition de ne pas dépasser des quotas.</p>

<h3>Google</h3>

<p>Google est positionné sur les SaaS avec <a href="http://www.google.com/Apps">Google Apps</a> et le PaaS avec <a href="https://appengine.google.com/">Google App Engine</a></p>

<ul>
<li>pour <a href="http://www.google.com/Apps">Google Apps</a> on aura à notre disposition

<ul>
<li>Google Docs (Suite Bureautique)</li>
<li>Google Sites (Pour réaliser des sites WEB)</li>
<li>Gmail &amp; Calendar (Email et Calendrier)</li>
<li>Google Groups (Groupe de discussion)</li>
<li>…</li>
</ul>
</li>
<li>et pour <a href="https://appengine.google.com/">Google App Engine</a> on va trouver les services suivants

<ul>
<li>héberger des applications JEE/Python/Go</li>
<li>A noter pour Java seule une partie de l&#8217;API est implémentée. Il faut utiliser les classes de la Google White List</li>
<li>Les quotas gratuits sont assez élevés (moins de 5 millions de pages vues par mois)</li>
<li>Base de données orientée colonnes et un &ldquo;Blobstore&rdquo; pour les fichiers</li>
<li>Et tout un tas de service Google  (Accounts, URL Fetching, MemCache, XMPP, CRON, TaskQueue, Image Processing, Emails)</li>
</ul>
</li>
</ul>


<p>Petit retour d’expérience personnel avec Google App Engine, le principe est vraiment bien par contre j&#8217;ai 2 remarques importantes:</p>

<ul>
<li>d&#8217;une version à l&#8217;autre du SDK, j&#8217;ai certaine fonctionnalité de ce blog qui change.</li>
<li>le comportement du SDK n&#8217;est pas identique au comportement du vrai Google App Engine.</li>
</ul>


<h3>Force.com</h3>

<p>Force.com était un acteur que je ne connaissais pas (bien que ma boite utilise Salesforce sans que je le sache). Ils ont commencé avec le SaaS <a href="www.salesforce.com">Salesforce</a> puis ils on peu à peu créé une offre Paas avec <a href="http://www.force.com/">Force.com</a>.
Voila un aperçu de leurs solutions:</p>

<ul>
<li>SaaS

<ul>
<li><a href="http://www.salesforce.com">Sales Force</a>, outil CRM</li>
<li>JigSaw, Customer Service</li>
<li><a href="http://www.salesforce.com/remedyforce/">RemedyForce</a>, Gestion de Helpdesk</li>
<li><a href="http://www.salesforce.com/fr/chatter/">Chatter</a>, (Twitter, Facebook et chat pour Entreprise)</li>
<li><a href="http://www.radian6.com/">Radian 6</a>, Social Network Listener</li>
<li>&hellip;</li>
</ul>
</li>
<li>PaaS avec Force.com

<ul>
<li><a href="http://www.heroku.com/">Heroku</a> qui est un hébergeur Node.js et Ruby</li>
<li><a href="http://database.com">Database.com</a> une base de donnée Cloud</li>
<li><a href="http://www.salesforce.com/platform/appforce/">AppForce</a> pour écrire des applications avec un L4G pour Force.com</li>
<li><a href="http://www.force.com/products/index.jsp?a#1&amp;slide#1">SiteForce</a> pour créer des sites WEB</li>
</ul>
</li>
</ul>


<h3>Azure</h3>

<p><a href="http://msdn.microsoft.com/fr-fr/windowsazure">Azure</a> est la solution de Microsoft. D&#8217;après le formateur, c&#8217;est des meilleurs infrastructure technique qu&#8217;il connaisse. La ou le bas blesse pour le formatteur, c&#8217;est au niveau des offres. Pour lui quand on prend un service Cloud chez Microsoft, on s&#8217;attendrait à avoir un Exchange prêt à l&#8217;emploi ce qui n&#8217;est pas directement possible apparemment. L&#8217;offre de Microsoft est en fait beaucoup plus orientée vers les développeurs avec:</p>

<ul>
<li>intégration dans Visual Studio</li>
<li>Instanciation de de Serveur Windows</li>
<li>Service Bus</li>
<li>SQL Server dans le Cloud</li>
<li>Blob Storage (stockage binaire)</li>
<li>Workers (genre de traitement batch)</li>
<li>Web</li>
</ul>


<p>L&#8217;autre offre de Microsoft est <a href="http://www.microsoft.com/fr-fr/office365/online-software.aspx">Office 365</a>. C&#8217;est une offre qui permet d&#8217;utiliser les outiles bureautique de la suite Office en mode Web.</p>

<h3>Autres Offres</h3>

<p>Il existe tout un tas d&#8217;autres offres</p>

<ul>
<li>IaaS

<ul>
<li><a href="http://www.gogrid.com/">GoGrid</a></li>
<li><a href="http://www.rackspace.com/">Rackspace</a></li>
<li><a href="http://www.joyent.com/">Joyent</a></li>
<li><a href="http://www.orange-business.com/fr/entreprise/portfolio/catalogue/toutes-solutions/flexible-computing.html">Orange Flexible Computing</a></li>
<li><a href="http://www.ovh.com">OVH</a></li>
</ul>
</li>
<li>PaaS

<ul>
<li><a href="http://www.gridgain.com/">GridGrain</a></li>
<li><a href="http://www.gigaspaces.com/">GigaSpaces</a></li>
<li><a href="http://www.cloudbees.com/">Cloud Bees</a></li>
<li><a href="http://www.cloudfoundry.com/">Cloud Foundry</a></li>
</ul>
</li>
</ul>


<p>D&#8217;autres offres se créent tous les jours. Il est fort à parié qu&#8217;après cette explosion, il va y avoir de la concentration dans les années à venir.</p>

<p>Notons également qu&#8217;une norme Cloud est en train de voir le jour : la norme Open Data Center.</p>

<h2>Conclusion</h2>

<p>On voit que les possibilités du Cloud sont immenses et que les fournisseurs et leurs services sont nombreux. Aussi il me parait important avant de se lancer dans n&#8217;importe quel projet Cloud de faire un étude sérieuse et de ne pas promettre à ses clients/décideurs que le Cloud est la réponse à tous leurs problèmes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hibernate OGM]]></title>
    <link href="http://evidal.github.io/blog/2011/06/30/Hibernate-OGM/"/>
    <updated>2011-06-30T00:00:00+02:00</updated>
    <id>http://evidal.github.io/blog/2011/06/30/Hibernate-OGM</id>
    <content type="html"><![CDATA[<p><a href="http://blog.emmanuelbernard.com/">Emmanuel Bernard</a> était au Lyon JUG ce jeudi 23 juin, il nous a présenté Hibernate OGM (pour Object Grid Mapping), un nouveau sous-projet de l&#8217;équipe Hibernate dédié au NoSQL. En deuxième partie, un dialogue permettait de mieux connaître les solutions Hibernate.</p>

<!--more-->


<h2>Hibernate OGM</h2>

<p>Le but d&#8217;Hibernate OGM et d&#8217;offrir une API standard pour fédérer les différents solution NoSQL.</p>

<p>Premier problème, chaque solution NoSQL a son propre modèle de stockage de données:</p>

<ul>
<li>Stockage Clé-Valeur (Hashmap), on stocke une clé et une valeur <a href="http://project-voldemort.com/">Voldemort</a>, <a href="http://www.jboss.org/infinispan">Infinispan</a></li>
<li>base de données orientées graphe <a href="http://neo4j.org/">Neo4j</a></li>
<li>base de données orientée document <a href="http://couchdb.apache.org/">Couch DB</a>, <a href="http://www.mongodb.org/">Mongo DB</a></li>
<li>base de données orientée Colonne  <a href="http://cassandra.apache.org/">Cassandra</a>, <a href="http://code.google.com/intl/fr/appengine/docs/python/gettingstarted/usingdatastore.html">Google Datastore</a></li>
</ul>


<p><img src="http://blog.xebia.fr/wp-content/uploads/2010/04/nosql.png" alt="Technos NoSQL" /></p>

<p>Source <a href="http://blog.xebia.fr/2010/04/21/nosql-europe-tour-dhorizon-des-bases-de-donnees-nosql/">Xebia</a></p>

<p>Deuxième problème, comme avant l&#8217;avènement de SQL, aucune solution NoSQL n&#8217;a le
même système de requêtage, ni les mêmes capacités.</p>

<p>Hibernate OGM a commencé il y a environ un an et Emmanuel y a bosser à temps partiel
cette année, le temps de laisser mûrir les choses. Emmanuel c&#8217;est beaucoup appuyé
sur Hibernate Core et Hibernate Search pour implémenter Hibernate OGM.
Pour l&#8217;instant Hibernate OGM supporte:</p>

<ul>
<li><a href="http://www.jboss.org/infinispan">Infinispan</a></li>
<li>CRUD d&#8217;objets</li>
<li>requêtes Hibernate Search</li>
</ul>


<p>Il ne supporte pas encore:</p>

<ul>
<li>JP-QL</li>
<li>autre chose qu&#8217;<a href="http://www.jboss.org/infinispan">Infinispan</a></li>
</ul>


<p>Une démo a été montrée, Emmanuel faisait tournée une série de tests en utilisant
la base de données H2. Il faisait tournée la même démo mais en changeant la conf
de son persistence.xml pour utiliser Hibernate OGM.
Emmanuel a lancer un appel à tous les développeurs qui souhaitent proposer des
améliorations ou des implémentations pour d&#8217;autre solution NoSQL.
Le projet n&#8217;en est qu&#8217;à son début mais est à surveiller par toutes les entreprises
qui souhaitent tester une solution NoSQL mais sans trop dépendre d&#8217;une solution
particulière. Cela leur permettra éventuellement de revenir à du SQL standard.
Pour l&#8217;instant je pense que l&#8217;approche est à surveiller pour voir comment elle va
évoluer. Je me deamnde juste si dans le cadre de NoSQL, la persistence objet a du
sens. En effet, vu la volumétrie des données qu&#8217;on est censée gérer dans des BBD
de type NoSQL, est-ce quel le modèle JPA est le meilleur ?
Je n&#8217;ai pas la réponse pour l&#8217;instant.</p>

<p>Les slides de la présentation sont disponible <a href="http://emmanuelbernard.com/various/presentations/hibernate-ogm-concepts-1.1.pdf">ici</a></p>

<h2>Hibernate</h2>

<p>La deuxième partie de la conférence était un dialogue entre Emmanuel et le public
à propose des différentes solutions Hibernate. J&#8217;ai découvert un module d&#8217;Hibernate
que je ne connaissais pas Hibernate Envers et qui permet de versionné des entités.
Très bon !</p>

<p>Merci au Lyon JUG, c&#8217;était vraiment une bonne soirée.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mix-IT]]></title>
    <link href="http://evidal.github.io/blog/2011/05/03/Mix-IT/"/>
    <updated>2011-05-03T00:00:00+02:00</updated>
    <id>http://evidal.github.io/blog/2011/05/03/Mix-IT</id>
    <content type="html"><![CDATA[<p>J&#8217;ai assisté le 5 avril à la Conférence <a href="http://www.mix-it.fr/">Mix-it</a> avec l&#8217;aimable participation de mon employeur.
Pour une première, j&#8217;ai trouvé que c&#8217;était plutôt réussi, les sujets étaient nombreux et variés.
Un petit bémol sur le manque de Clim&#8217;: Ça sentait &ldquo;l&#8217;homme&rdquo; en fin de journée.</p>

<p>5 tracks étaient accessibles:</p>

<ul>
<li>Techy : Java et son écosystème,</li>
<li>Agility : Agilité pour débutants et passionnés,</li>
<li>Trendy : Tendances novatrices et avant-gardistes,</li>
<li>Mixy : Le meilleur de l’agilité et des technologies Java,</li>
<li>Gamy : Echanges autour de jeux agiles et de coding dojos</li>
</ul>


<p>J&#8217;ai participé aux sessions suivantes:</p>

<ul>
<li>Let&rsquo;s make this test suite run faster</li>
<li>HTML 5</li>
<li>Clojure</li>
<li>Apache Mahout</li>
<li>ASGI &amp; Flex</li>
</ul>


<p>Voilà les notes (complétés) que j&#8217;ai prises, la suite après le break (attention, c&#8217;est long).</p>

<!--more-->


<h2>Let&rsquo;s make this test suite run faster</h2>

<p>Une présentation assez intéréssante pour les équipes qui ont des builds interminables (plus d&#8217;un heure tests compris).
Le speaker <a href="http://blog.javabien.net/">David Gageot</a> était assez pertinent est a présenté 3 stratégies combinables ont été présentées sur le mode le bon, la brute, le truand : The Cheater (le tricheur), The Lazy (le fainéant), The Brave (le brave).</p>

<ul>
<li>Stratégie du Cheater

<ul>
<li>Acheter une machine plus puissante</li>
<li>Utilisez les nouvelle options de Maven MultiCore support (-T 4, -T 1C)</li>
<li>Utilisez des outils comme SureFire sur Ant pour distribuer les test</li>
<li>Stratégie du Lazy</li>
<li>Nettoyer les tests inutiles (ça enlève du temps de test),</li>
<li>Nettoyer le code mort et les tests associés (ça enlève également du temps de test)</li>
<li>Ne pas utiliser les vrais IO pour les test (Réseau, Sytème de fichiers, base de données)

<ul>
<li>utilisation d&#8217;une base en mémoire comme H2</li>
<li>utiliser Apache Virtual File System pour simuler un file system</li>
<li>utiliser un serveur Smtp light comme Subetha</li>
</ul>
</li>
</ul>
</li>
<li>Stratégie du Brave

<ul>
<li>Restructurer tous les tests pour

<ul>
<li>éviter de tester plusieurs fois la même fonctionnalité</li>
<li>éviter de tester les couches basses (persistence, frameworks, etc…)</li>
<li>mettre le plus de test du coté unitaire pour éviter de surcharger les tests d&#8217;intégration</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>J&#8217;ai trouvé une version de la présentation ici :
<a href="http://www.slideshare.net/dgageot/lets-make-this-test-suite-run-faster-paris-jug-2011">http://www.slideshare.net/dgageot/lets-make-this-test-suite-run-faster-paris-jug-2011</a></p>

<p>J&#8217;ai beaucoup aimé cette présentation car elle donnait des solutions pragmatiques à des problèmes qu&#8217;on rencontre tous les jours.</p>

<h2>HTML 5</h2>

<p>Une des grosses présentations (pour moi) de Mix-It donnée par Alain Duval et Cédric Beurtheret.
Je m&#8217;intéresse depuis peu de temps à HTML 5, pendant longtemps les frameworks java ont cherché à tous prix à masquer le HTML.
Avec les possibilités redécouvertes de Javascript, et les nouvelles API ajoutées aux différentes normes, il va falloir se remettre très sérieusement à HTML.
Voilà un petit résumé de la présentation :</p>

<ul>
<li>HTML 4 est vieux, il a été livré en 1998 !</li>
<li>Le travail sur HTML 5 a commencé en  2004, la release finale est prévue entre 2012-2014</li>
<li>3 consortiums bossent sur le sujet : W3C, IETF, WHATWG</li>
<li>La plupart des dernières version des navigateurs commence a supporté des éléments de HTML 5 (pour voir comment se comporte le votre, allez sur <a href="http://html5test.com/">http://html5test.com/</a>)</li>
<li>HTML 5 cen&#8217;est pas seulement le HTML, c&#8217;est aussi tout un tas d&#8217;évolutions et d&#8217;APIs qui ont été ajoutées.</li>
</ul>


<h4>Les évolutions en détails</h4>

<ul>
<li>Des headers plus simples

<ul>
<li>doctype, charset</li>
</ul>
</li>
<li>Des nouveaux tags pour une approche plus sémantique des pages

<ul>
<li>article, aside, header, footer, nav, etc&hellip;</li>
<li>C&#8217;est particulièrement intéressant pour l&#8217;accessibilité des sites WEB (malvoyants)</li>
</ul>
</li>
<li>le querySelector

<ul>
<li>Je le vois comme un standardisation de la sélection d&#8217;éléments avec Jquery</li>
</ul>
</li>
</ul>


<p><img src="http://blog.referencementschool.com/wp-content/uploads/2009/07/html5_structure.png" alt="..." /></p>

<ul>
<li>Les formulaires HTML 5 sont enrichis

<ul>
<li>de nouveau type de champs (Number, Phone, URL, email, Date, Color Picker, Slider), les navigateurs ne râlent pas mais n&#8217;implémentent pas encore ces types de champs.</li>
<li>de nouveau attributs (PlaceHolder, AutoComplete, AutoFocus,&hellip;)</li>
<li>de la validation coté client</li>
</ul>
</li>
<li>Widget

<ul>
<li>Des Applications WEB disponibles comme de vrais applications</li>
</ul>
</li>
<li>Les Canvas (attention les yeux)

<ul>
<li>Je crois qu&#8217;on peut oublier Flash, VML ou Silverlight</li>
<li>On peut rendre de la 2D, de la 3D en utilisant Javascript

<ul>
<li>comme exemple célèbre, Google a porté Quake 2 avec cette technologie</li>
</ul>
</li>
</ul>
</li>
<li>Support du SVG natif</li>
<li>Tags Audio et Video

<ul>
<li>Sans plugin, sans flash</li>
<li>les formats audios supportés : AAC, MP3, OGG VORBIS</li>
<li>les formats vidéo supportés : H264, VPM, OGG THEORA (pas encore validé)</li>
</ul>
</li>
<li>Des évolutions sur les APIs Javascript

<ul>
<li>Drag &amp; Drop, Geolocation, Web Socket (Full duplex connection), Offline Web</li>
</ul>
</li>
<li>Web Workers

<ul>
<li>C&#8217;est un genre de Thread dans un navigateur</li>
</ul>
</li>
<li>Cross Window Messaging, API pour communiquer entre différentes fenêtres</li>
<li>Web Storage, de nouveaux espaces pour stocker des informations offline de manière plus ou moins structurée

<ul>
<li>Session (hashmap) durée de vie Session,</li>
<li>Local (hashmap persisted) durée de vie du cache du navigateur,</li>
<li>Database (Real SQL database persisted) durée de vie du cache du navigateur,</li>
<li>Ces storages sont accessibles uniquement par les sites qui les ont créés, mais à mon avis la sécurité de ces espaces sera faible. Il faudra donc faire attention à ce que l&#8217;on stocke dans ces espaces.</li>
</ul>
</li>
</ul>


<h4>Focus sur Device API</h4>

<p>Device API m&#8217;intéresse particulièrement. Elle a juste été évoquée mais j&#8217;ai eu la chance de pouvoir discuter avec Cédric Beurtheret qui m&#8217;a donné plus de détails et des liens pour creuser.
La Device API est une initiative qui permet d&#8217;accéder à des informations sur la machine sur laquelle est vue le site.
Une initiative parallèle a été démarré par un autre consortium <a href="http://www.wacapps.net">WAC</a> mais les APIs définis coté HTML 5 et WAC vont convergés.
Device API est clairement une des specs les moins avancés de HTML 5, mais elle clairement prometteuse pour les développeurs d&#8217;application mobile.
C&#8217;est particulièrement intéressant quand on tourne sur un téléphone Mobile car cette Device API exposera tout un tas d&#8217;information et d&#8217;actions à propos du Device (téléphone):</p>

<ul>
<li>Application Launcher (pour lancer des applications à partir d&#8217;un site Web)</li>
<li>Contacts (accès et gestion)</li>
<li>Calendar (accès et gestion)</li>
<li>Tasks (accès et gestion)</li>
<li>Camera (accès et gestion)</li>
<li>Messaging : SMS, MMS, Email (accès et gestion)</li>
<li>Communication Logs (accès et gestion)</li>
<li>File System (Accès)</li>
<li>Gallery (accès et gestion)</li>
<li>System Information &amp; Event (accès statistiques CPU, network, etc.)</li>
<li>User Interface (Gestion)</li>
<li>Permissions (pour autoriser/bloquer un site WEB souhaitant utiliser les Device API)
Quelques navigateurs mobiles en mode pre-release supportent ces fonctionnalités : Webkit, Opera et Obigo.</li>
</ul>


<p>Quelques liens:</p>

<ul>
<li>Une version de la présentation : <a href="http://www.slideshare.net/normandyjug/html5-jug">http://www.slideshare.net/normandyjug/html5-jug</a></li>
<li>Les specs : <a href="http://dev.w3.org/html5/spec/Overview.html">http://dev.w3.org/html5/spec/Overview.html</a></li>
<li>Sur Device API :

<ul>
<li><a href="http://www.wacapps.net">http://www.wacapps.net</a></li>
<li><a href="http://www.w3.org/2009/dap/">http://www.w3.org/2009/dap/</a> (Device API)</li>
</ul>
</li>
<li>Quelques démos

<ul>
<li><a href="http://html5demos.com/">http://html5demos.com/</a></li>
<li><a href="http://mrdoob.com/">http://mrdoob.com/</a> (Canvas Demos)</li>
</ul>
</li>
</ul>


<h2>Clojure</h2>

<p>Bon pour être honnête j&#8217;ai pas été très convaincu. Je n&#8217;avais jamais regardé à quoi ressemblait Clojure, donc je suis vraiment arrivé &ldquo;vierge&rdquo; sur le sujet.
Et là le choc, Clojure est un langage LISP. La dernière fois que j&#8217;ai fait du LISP, c&#8217;était à la FAC. Je me souviens que la principale difficulté du langage était de s&#8217;y retrouver dans les parenthèses.
Bon ben là c&#8217;est un peu pareil. En plus la présentation était juste après le déjeuner, ça n&#8217;a pas aidé.
En gros, voilà les buts de Coljure:</p>

<ul>
<li>Réduire la complexité</li>
<li>faire des applications concurrentes</li>
<li>être expressif</li>
<li>d&#8217;être un langage généraliste</li>
<li>d&#8217;être compatible avec le Byte Code</li>
<li>faire de la programmation fonctionnelle</li>
<li>gérer les états</li>
<li>Syntaxe LISP :&lsquo;(</li>
</ul>


<p>Quelques exemples :</p>

<ul>
<li>(def a (/ 1.0 3.0))</li>
<li>(def b (/ 3.0 1.0))</li>
<li>(* a b)</li>
<li>(def c (* a a a a a a a a a a))</li>
<li>(def d (* b b b b b b b b b b))</li>
<li>(* c d)</li>
<li>(defn plusn [x]   (fn [y] (+ x y)))</li>
<li>(def plus5 (plusn 5))</li>
<li>(plus5 3)</li>
</ul>


<p>Je n&#8217;en dis pas plus, je n&#8217;ai pas accroché. Par contre j&#8217;ajouterai qu&#8217;il y a une tendance dans l&#8217;univers Java pour utilser la JVM différement.
De nombreux langages bytecode compatible apparaissent : Jython, Groovy, Scala, Clojure, Ceylon, &hellip;
Cela est dû en fait à une longue pause de 5 ans au niveau de la syntaxe Java, du coup d&#8217;autres langages ont voulu prendre le relais.
Il faut dire que certains aspects de Java font assez vieillots (je pense à la lecture d&#8217;un fichier texte en JAVA par rapport à son équivalent en Groovy).</p>

<p>Pour revenir à Clojure, pour en savoir plus ilfaut aller voir: <a href="http://clojure.org/">http://clojure.org/</a></p>

<h2>Apache Mahout</h2>

<p>Apache Mahout est un nouveau projet Apache, très jeune mais prometteur. Il propose de mettre à disposition des algorithmes puissants d&#8217;analyse sur de très gros volumes de données.
Pour se faire, il utilise la méthode MapReduce (la version Hadoop) pour traiter les très gros volumes de données.
Grace à ce système on va pouvoir par exemple:</p>

<ul>
<li>Recommander

<ul>
<li>sur Amazon, ce genre d&#8217;outil permet de proposer des articles similaires ou ayant été acheté par le même type d&#8217;utilisateurs</li>
</ul>
</li>
<li>Classifier

<ul>
<li>Classer des documents à partir d&#8217;un échantillon déja classer</li>
<li>détections de SPAM sur Gmail par exemple</li>
<li>détections de document suspect (ou hors sujet)</li>
</ul>
</li>
<li>Rassembler

<ul>
<li>Trouver des groupes de documents dans un vaste ensemble de documents</li>
<li>Trouver les tendances, les idées directrices dans un ensemble de documents (comme dans Google News par exemple)</li>
<li>Trouver des comportements typiques d&#8217;utilisateurs</li>
</ul>
</li>
<li>Pattern Mining, evolutionary algorithm</li>
</ul>


<p>Si on va faire un tour sur le site de Apache Mahout, on verra que de nombreux algorithmes sont déjà disponibles (et qu&#8217;il grossit):</p>

<ul>
<li>Classification : Logisitc Regression, Bayesian, Support Vector Machines, Perceptron an Winnow, Neural Network, &hellip;</li>
<li>Clustering : Canopy, K-Means, Fuzzy K-Means, Expectation Maximization, Mean Shift Clustering, Hierachical Clustering, &hellip;</li>
<li>Pattern : FP Growth Alorithm</li>
<li>Regression : Locally Weighted Linear Regression</li>
<li>Dimension Reduction : Singular Value Decomposition, Principal Components Analysis, Independent Component Analysis, &hellip;</li>
<li>Evolutionary Algorithms</li>
<li>Recommenders / Collaborative Filtering</li>
</ul>


<p>Pour plus d&#8217;informations:</p>

<ul>
<li><a href="http://www.slideshare.net/mfiguiere/mixit-apr-2011-intelligence-collective-et-apache-mahout">http://www.slideshare.net/mfiguiere/mixit-apr-2011-intelligence-collective-et-apache-mahout</a></li>
<li><a href="http://mahout.apache.org/">http://mahout.apache.org/</a></li>
</ul>


<h2>OSGI and Flex</h2>

<p>C&#8217;est un peu l&#8217;erreur de casting cette journée. Je pensais qu&#8217;on allait avoir une vue d&#8217;ensemble de ces technologies, en fait il fallait venir en connaissant déjà Flex ou OSGI.
C&#8217;était une session très technique avec des réponses à des problèmes précis.</p>

<p>Voilà ce qu&#8217;il faut retenir:</p>

<ul>
<li>Le but du mariage entre OSGI et Flex est de modulariser l&#8217;application</li>
<li>Flex normalement utilise HTTP ou SOAP pour échanger avec la partie serveur</li>
<li>Avec OSGI, on va pouvoir avoir plus d&#8217;interaction avec des objets distants ou travailler en mode Producer/Consumer (Topic)</li>
<li>Plusieurs Frameworks sont disponibles pour faciliter l&#8217;interaction avec le serveur

<ul>
<li>AMF 3</li>
<li>GraniteDS</li>
<li>Spring Flex</li>
</ul>
</li>
<li>Le code source était assez compliqué pour les néophytes comme moi sur Flex et OSGI></li>
<li>Par contre la démo était assez bluffante:

<ul>
<li>quand le speaker ajouter des JAR sur le serveur, de nouvelles portion d&#8217;écran apparaissaient sur la GUI.</li>
<li>Différentes version d&#8217;un portlet pouvait également cohabiter sur la GUI</li>
</ul>
</li>
</ul>


<p>Plus d&#8217;informations sur
<a href="http://www.slideshare.net/ougf/ougf-osgi-flex-5395089">http://www.slideshare.net/ougf/ougf-osgi-flex-5395089</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yet another developer's blog]]></title>
    <link href="http://evidal.github.io/blog/2011/03/16/Yet-another-developers-blog/"/>
    <updated>2011-03-16T00:00:00+01:00</updated>
    <id>http://evidal.github.io/blog/2011/03/16/Yet-another-developers-blog</id>
    <content type="html"><![CDATA[<p>Tout est dans le titre&hellip; encore un blog de développeur.</p>

<p>Ce blog est d&#8217;abord le résultat (non fini) d&#8217;une petite séance d’essai du framework Gaelyk. Ben oui quoi, à quoi ça sert d&#8217;être développeur si on développe (mal) pas son propre blog.
Mine de rien ce premier essai m&#8217;a permis de jeter un coup d’œil sur le fonctionnement et &ldquo;l’écosystème&rdquo; Google App Engine. J&#8217;ai donc essayé pour ce petit essai:</p>

<ul>
<li><a href="http://groovy.codehaus.org/">Groovy</a>, un célèbre langage compatible avec le JRE</li>
<li><a href="http://gaelyk.appspot.com/">Gaelyk</a>, un petit framework WEB Groovy simple et efficace (à part l&#8217;outillage)</li>
<li><a href="[http://obgaektify.appspot.com">Obgaektify</a>, un binding en Groovy de la librairie Objectify qui est une sorte de JPA light</li>
</ul>


<p>J&#8217;en ai profité aussi pour mieux connaître <a href="http://jquery.com/">JQuery</a> et mettre les mains dans HTML5. A faire tout le temps du JSF et Richfaces, on oublie parfois ce qu&#8217;il y a dessous.
Le résultat est loin dêtre parfait, mais utilisable. Il comprends cette partie visible, mais aussi un back office avec éditeur WIKI et tout et tout.
Par contre il me reste notamment à ajouter la gestion des commentaires, des tags et des liens. Vu que je ne vais pas rendre public ce site tout de suite, ça me laisse un peu de temps pour ajouter tout ça.</p>

<p>Quelques petits conseils et retours immédiats à propos de Google App Engine et des libs utilisées:</p>

<ul>
<li>Vous utilisez un JVM &ldquo;sandboxé&rdquo; et avec une &ldquo;white-list&rdquo; du SDK java. Du coup n&#8217;hésitez pas à mettre en prod le plus rapidement possible sur GAE, sous peine de surprise. J&#8217;ai par exemple perdu du temps car mon Logger déclaré en static dans une classe n&#8217;est pas du goût de monsieur.</li>
<li>L&#8217;API du datastore est assez simple et utilisable telle quelle, je l&#8217;ai agrémentée de Obgaektify &ldquo;pour la science&rdquo; et surtout pour écrire un code plus concis.</li>
<li>J&#8217;aime beaucoup le système de routage de Gaelyk, ça permet d&#8217;avoir de &ldquo;belles&rdquo; URL simplement.</li>
<li>Quand tout sera à peu près en place, je ferais (du moins j’essayerai de faire un article plus long).</li>
</ul>

]]></content>
  </entry>
  
</feed>
